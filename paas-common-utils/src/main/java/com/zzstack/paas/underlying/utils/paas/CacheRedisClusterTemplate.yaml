redisConfig:
    #连接空闲超时，单位：毫秒
    #如果当前连接池里的连接数量超过了最小空闲连接数，而同时有连接空闲时间超过了该数值，那么这些连接将会自动被关闭，并从连接池里去掉
    idleConnectionTimeout: 10000

    connectTimeout: 10000
    #命令等待超时
    timeout: 3000
    #命令失败重试次数
    retryAttempts: 3
    #命令重试发送时间间隔
    retryInterval: 1500
    #重新连接时间间隔
    failedSlaveReconnectionInterval: 3000
    #redis slave节点失败后（第一条失败命令开始）的重试间隔
    failedSlaveCheckInterval: 60000
    
    #密码
    password:
    
    #单个连接最大订阅数量
    subscriptionsPerConnection: 1
    #客户端名称(在Redis节点里显示的客户端名称)
    clientName: smsprocess-queue
    
    #负载均衡算法类的选择
    # 在使用多个Redis服务节点的环境里，可以选用以下几种负载均衡方式选择一个节点：
    # org.redisson.connection.balancer.WeightedRoundRobinBalancer - 权重轮询调度算法
    # org.redisson.connection.balancer.RoundRobinLoadBalancer - 轮询调度算法
    # org.redisson.connection.balancer.RandomLoadBalancer - 随机调度算法
    loadBalancer: RoundRobinLoadBalancer
    
    subscriptionMode: MASTER
    # 从节点发布和订阅连接的最小空闲连接数
    subscriptionConnectionMinimumIdleSize: 1
    # 从节点发布和订阅连接池大小
    subscriptionConnectionPoolSize: 1
    
    # 从节点最小空闲连接数
    # 多从节点的环境里，每个 从服务节点里用于发布和订阅连接的连接池最大容量。连接池的连接数量自动弹性伸缩。
    slaveConnectionMinimumIdleSize: 10
    # 从节点连接池大小
    # 多从节点的环境里，每个 从服务节点里用于普通操作（非 发布和订阅）的最小保持连接数（长连接）。
    # 长期保持一定数量的连接有利于提高瞬时读取反映速度。
    slaveConnectionPoolSize: 20
  
    # 主节点最小空闲连接数， 多从节点的环境里，每个 主节点的最小保持连接数（长连接）。长期保持一定数量的连接有利于提高瞬时写入反应速度。
    masterConnectionMinimumIdleSize: 10
    # 主节点连接池大小
    masterConnectionPoolSize: 20
    # 读取操作的负载均衡模式
    # 注：在从服务节点里读取的数据说明已经至少有两个节点保存了该数据，确保了数据的高可用性。
    # 设置读取操作选择节点的模式。
    # 可用值为： SLAVE - 只在从服务节点里读取。 MASTER - 只在主服务节点里读取。 MASTER_SLAVE - 在主从服务节点里都可以读取。
    readMode: "MASTER_SLAVE"
    
    #集群扫描间隔时间
    scanInterval: 1000
    # DEFAULT, ByteArrayCodec, FstCodec, JsonJacksonCodec, Kryo5Codec, KryoCodec, LZ4Codec,
    #  MarshallingCodec, SerializationCodec, SnappyCodec, SnappyCodecV2, StringCodec
    codec: ByteArrayCodec
    
    #可选参数：
    #TransportMode.NIO,
    #TransportMode.EPOLL - 需要依赖里有netty-transport-native-epoll包（Linux）
    #TransportMode.KQUEUE - 需要依赖里有 netty-transport-native-kqueue包（macOS）
    transportMode: "NIO"
    
    #PROXY, CLUSTER
    serverMode: CLUSTER
    
    server:
        id: "A"
        weight: 50
        nodeAddresses:
            - "redis://172.20.0.173:7001"
            - "redis://172.20.0.173:7002"
            - "redis://172.20.0.173:7003"
